    
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.*;
import java.io.File;
import java.io.IOException;


   class RWLock{
	int no_of_reads;
	boolean no_of_writes;
        ReadWriteThread rwt = new ReadWriteThread();
	public RWLock(File inFile) {
	  no_of_reads=0;
	  no_of_writes=false;
	  RWLock.inFile=inFile;
	}
	
	public void getReadAccess() throws IOException, InterruptedException{
	  no_of_reads++;
          System.out.println(Thread.currentThread().getName()+" Reading");
	  BufferedReader br=new BufferedReader(new FileReader(inFile));
	  String read=null;
	  while((read=br.readLine())!=null){
	    System.out.println(Thread.currentThread().getName()+read);
	  }
	  releaseReadLock();
	  br.close();
	}
	public void getWriteAccess() throws IOException, InterruptedException{
	  no_of_writes=true;
	  String content="Hello\n";
	  BufferedWriter bw=new BufferedWriter(new FileWriter(inFile,true));
	  bw.append(content);
	  System.out.println(Thread.currentThread().getName()+" "+"writing");
	  releaseWriteLock();
	  bw.close();
	}
	public void releaseReadLock(){
	  no_of_reads--;
          System.out.println(Thread.currentThread().getName()+" released");
	  synchronized (rwt){
	    if(no_of_reads==0){
	      rwt.notifyAll();
	    }
	  }
	}
	public void releaseWriteLock(){
	  synchronized (rwt){
	     System.out.println(Thread.currentThread().getName()+" released");
	     no_of_writes=false;
	     rwt.notifyAll();
	  }
	}
   }

   public class ReadWrite{
       public static void main(String args[]){
	 Thread t[]=new Thread[5];
	 t[0]=new Thread(new ReadWriteThread("read"));
	 t[1]=new Thread(new ReadWriteThread("write"));
	 t[2]=new Thread(new ReadWriteThread("write"));
	 t[3]=new Thread(new ReadWriteThread("read"));
	 t[4]=new Thread(new ReadWriteThread("read"));
	 try{
	   for(int i=0;i<5;i++){
	      t[i].start();
	   }
	 }
	 catch(Exception e){
	   e.printStackTrace();
	 }
       }
   }
   class ReadWriteThread implements Runnable{
       private File inFile=null;
       private String operation;
       RWLock rw;
	
       ReadWriteThread(String operation){
	  this.operation=operation;
	  rw=new RWLock(this.inFile);
       }
	
       public void run(){
	  try{
	    System.out.println("Starting..."+Thread.currentThread().getName());
	    if(operation.equalsIgnoreCase("read")){
		rw.getReadAccess();
	    }
	    else
	        rw.getWriteAccess();
	  }
	  catch(Exception e){
	    e.printStackTrace();
	    System.out.println("error");
	  }
      }	
    }
		






